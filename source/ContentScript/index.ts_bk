interface FollowedRow {
    div: HTMLElement
    isFavorite?: boolean
    url?: string
    channel?: string
    game?: string
    viewers: number
    currentPosition?: number
}

const XXX = ['cazgem', 'pumpkinhead_live', 'k1gg1', 'soeverdream', 'dawnlaine', 'laslo1984', 'kaiielle', 'frakkle', 'z_lycos', 'theyed_', 'blaknite_', 'blipo'];

const getFavorites = () => {
    let FAVORITES: any = {}
    for (let e of XXX) {
        FAVORITES[e] = true
    }
    // console.log(FAVORITES)
    return FAVORITES
}

const canExpandFurther = (element: HTMLElement) => {
    if (element && element.lastChild) {
        const lastChild: HTMLElement = element.lastChild as HTMLElement
        const viewers: HTMLElement = lastChild.getElementsByTagName('span')[0]
        return viewers.textContent?.trim().toLowerCase() !== 'offline'
    }
    return false
}

const getElementByXpath = (path: string) => {
    return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

const showMore = () => {
    const showMore: HTMLElement = getElementByXpath('//*[@data-test-selector="ShowMore"]') as HTMLElement
    if (showMore) {
        try {
            showMore.click()
        }
        catch (error) {
            console.log(error);
        }
    }
}

// const showLess = () => {
//     const showLess = getElementByXpath('//*[@data-test-selector="ShowLess"]');
//     try {
//         showLess.click();
//     }
//     catch (error) {
//         console.log(error);
//     }
// }

const sortFollowed = () => {
    let FAVORITES: any = getFavorites()

    const checkFavorite = (channel: string) => FAVORITES[channel.toLowerCase()] !== undefined

    let container = getElementByXpath('//*[@id="sideNav"]//div[contains(@class, "tw-transition-group")]') as HTMLElement
    for (let i = 0; i < 20; i++) {  // TODO: This is currently hard-coded.
        if (!canExpandFurther(container)) {
            break;
        }
        showMore()
        container = getElementByXpath('//*[@id="sideNav"]//div[contains(@class, "tw-transition-group")]') as HTMLElement
    }

    let rows: FollowedRow[] = new Array()

    let xx = Array()
    for (let index = 0; index < container.children.length; index++) {
        xx.push(container.children[index] as HTMLElement)
    }

    xx.forEach((e: HTMLElement) => {
        let info: FollowedRow = { div: e, viewers: -1 }

        info.viewers = Number.parseInt(e.getElementsByTagName('span')[0].textContent || '')
        if (!Number.isNaN(info.viewers)) {
            info.url = e.getElementsByTagName('a')[0].href

            let p = e.getElementsByTagName('p')
            if (p !== undefined && p.length > 0 && p[0].textContent !== null) {
                info.channel = p[0].textContent.toLowerCase()
            }

            p = e.getElementsByTagName('p')
            if (p !== undefined && p.length >= 2 && p[1].textContent !== null) {
                info.game = p[1].textContent
            }

            info.isFavorite = info.channel ? checkFavorite(info.channel) : false
            // console.log(info)
            rows.push(info)
        }
    });

    rows.sort((a, b) => b.viewers - a.viewers);
    
    // Node after which the first non-favorite element would be added.
    // let lastSortedFavorite: HTMLElement | null = null

    for (let i = rows.length - 1; i >= 0; i--) {
        const row = rows[i];
        if (row.isFavorite && row.div.parentNode) {
            row.div.parentNode.removeChild(row.div);
            container.insertBefore(row.div, container.childNodes[0]);
            row.div.style.backgroundColor = 'rgba(30, 165, 20, 0.25)';
            console.log(`Channel ${row.channel} moved.`);
        }
    }
}

(() => {
    setInterval(() => sortFollowed(), 15000);
})();

export { };
